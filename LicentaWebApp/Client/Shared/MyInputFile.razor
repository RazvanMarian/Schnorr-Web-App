@using System.IO
@inject HttpClient _httpClient
@inject ISnackbar _snackbar
@inject IUploadFileService _uploadFileService
@inject IJSRuntime _jsRuntime



<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        height: 80px;
        width: 100%;
    }

    .drag-drop-input {
        position: absolute;
        width: 33%;
        height: 28%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }

    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }

    .list {
        padding: 2em;
        min-width: 100%;
    }
</style>

<MudGrid Justify="Justify.FlexStart" Spacing="4" Style="display: initial;">
    <MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")" @ondragleave="@(()=>_dragEnterStyle=null)"
        @ondragend="@(()=>_dragEnterStyle=null)" Class=@("drag-drop-zone "+ _dragEnterStyle)>

        <InputFile OnChange="OnInputFileChanged" multiple class="drag-drop-input" />

        @if (_fileName == null)
        {
            <MudText Typo="Typo.h6">Upload file</MudText>
        }
        else
        {
            <MudItem @key="@_file">
                <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@_fileType" />
                @_fileName
            </MudItem>
        }
    </MudPaper>

    <MudGrid Justify="Justify.Center" Style="padding-top: 1rem;" Spacing="2">
        <MudItem>
            <MudButton OnClick="OnClickFunction" Disabled="@_show" Color="Color.Primary" Variant="Variant.Filled"
                       Style="width: 6rem">
                Upload
            </MudButton>
        </MudItem>
        <MudItem>
        <MudButton OnClick="Clear" Color="Color.Primary" Disabled="@(_show)" Variant="Variant.Filled"
                       Style="width: 6rem">
                Clear
            </MudButton>
        </MudItem>
    </MudGrid>
</MudGrid>

@code {

    [Parameter]
    public string KeyName { get; set; }
    
    
    string _dragEnterStyle;
    string _fileType;
    IBrowserFile _file;
    string _fileName = null;
    bool _show = true;

    void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _fileName = _file.Name;
        _fileType = Path.GetExtension(_file.Name);
        _show = false;
    }

    private async Task OnClickFunction()
    {
        if (KeyName == null)
        {
            Console.WriteLine("Fara cheie");
            await _uploadFileService.UploadHashFile(_file);
        }
        else
        {
            Console.WriteLine(KeyName);
            var result  = await _uploadFileService.UploadHashWithKey(_file,KeyName);
            if (result!=null)
            {
                await _jsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream",result,"signature.plain");
            }
        }
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Add("File uploaded", Severity.Success);
        _fileName = null;
        _show = true;
    }
    
    void Clear()
    {
        _fileName = null;
        _show = true;
        _dragEnterStyle = null;
    }

}