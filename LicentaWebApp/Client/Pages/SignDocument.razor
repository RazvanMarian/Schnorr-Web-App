@page "/Sign-Document"
@using LicentaWebApp.Shared.Models
@inject ISnackbar _snackbar
@inject ViewModels.IKeyViewModel _keyViewModel
@using System.IO
@using LicentaWebApp.Shared.PayloadModels
@inject IUploadFileService _uploadFileService
@inject IJSRuntime _jsRuntime
@inject IDialogService _dialog
@attribute [Authorize]

<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        height: 80px;
        width: 100%;
    }

    .drag-drop-input {
        position: absolute;
        width: 33%;
        height: 28%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }
</style>

<MudGrid style="margin: auto; justify-content: center; width: 33%">
    <MudText Style="padding-bottom: 3rem" Typo="Typo.h3">Sign a document </MudText>
    <MudItem xs="12">
        <MudSelect Label="Select a key" @bind-Value="SelectedKey"
                   AnchorOrigin="Origin.BottomCenter"
                   Placeholder="Please select a key" AdornmentIcon="@Icons.Material.Filled.VpnKey" AdornmentColor="Color.Primary">
            @foreach (var key in _keyViewModel.Keys)
            {
                <MudSelectItem Value="@key.Name">@key.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string"
                   Label="Other signers"
                   MultiSelection="true"
                   AnchorOrigin="Origin.BottomCenter"
                   @bind-SelectedValues="Options">
            @foreach (var user in CompanyUsers)
            {
                <MudSelectItem T="string" Value="@user.EmailAddress">
                    @user.FirstName @user.LastName - @user.EmailAddress
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="drag-drop-zone">

            <InputFile OnChange="OnInputFileChanged" class="drag-drop-input"/>

            @if (_fileName == null)
            {
                <MudText Typo="Typo.h6">Upload file</MudText>
            }
            else
            {
                <MudItem @key="@_file">
                    <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@_fileType"/>
                    @_fileName
                </MudItem>
            }
        </MudPaper>

        <MudGrid Justify="Justify.Center" Style="padding-top: 1rem;" Spacing="2">


            <MudItem>
                <MudButton OnClick="OnClickFunction" Disabled="@_show" Variant="Variant.Filled"
                           Style="width: 6rem">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudText>Upload</MudText>
                    }
                </MudButton>
            </MudItem>
            <MudItem>
                <MudButton OnClick="Clear" Disabled="@(_show)" Variant="Variant.Filled"
                           Style="width: 6rem">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudText>Clear</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudItem>

</MudGrid>


@code {

    private string SelectedKey { get; set; }
    private IEnumerable<string> Options { get; set; } = new HashSet<string>();
    private List<User> CompanyUsers { get; set; } = new();

    bool _processing;
    string _fileType;
    IBrowserFile _file;
    string _fileName;
    bool _show = true;

    protected override async Task OnInitializedAsync()
    {
        CompanyUsers = await _keyViewModel.GetCompanyUsers();
        await _keyViewModel.InitializeKeys();
    }

    void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _fileName = _file.Name;
        _fileType = Path.GetExtension(_file.Name);
        _show = false;
    }

    private async Task OnClickFunction()
    {
        _show = true;
        _processing = true;

        if (string.IsNullOrEmpty(SelectedKey))
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("You did not select a key!", Severity.Error);
            Clear();
            return;
        }
        
        var resultOtpGeneration = await _uploadFileService.GenerateOtpCode();
        if (resultOtpGeneration == null)
        {
            Clear();
            return;
        }

        if (resultOtpGeneration != "ALIVE")
        {
            var dialog = _dialog.Show<SignDialog>("Prove your identity", new DialogOptions {DisableBackdropClick = true});
            var dialogResult = await dialog.Result;


            if (dialogResult.Cancelled)
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("We could not verify your identity", Severity.Error);
                Clear();
                return;
            }
        }

        if (!Options.Any())
        {
            var result = await _uploadFileService.SignFile(_file, SelectedKey, _fileName);
            if (result != null)
            {
                await _jsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", result,
                    "signature.plain");
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("File uploaded", Severity.Success);
                Clear();
            }
            else
            {
                Clear();
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("File could not be uploaded!", Severity.Error);
            }
        }
        else
        {
            var payload = new MultipleSignPayload();
            foreach (var email in Options)
            {
                foreach (var user in CompanyUsers.Where(user => email == user.EmailAddress))
                {
                    payload.Users.Add(user);
                }
            }

            payload.UserKeyName = SelectedKey;
            payload.FileName = _fileName;

            var res = await _uploadFileService.MultipleSignFile(_file, payload);

            if (res.IsSuccessStatusCode)
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Request was sent!", Severity.Success);
            }
            else
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Request for signing could not be sent!", Severity.Error);
            }
        }
        Clear();
    }

    void Clear()
    {
        _processing = false;
        _fileName = null;
        _show = true;
        Options = Enumerable.Empty<string>();
        SelectedKey = "";
    }

}