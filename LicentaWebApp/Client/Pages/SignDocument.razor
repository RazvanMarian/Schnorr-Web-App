@page "/Sign-Document"
@using LicentaWebApp.Shared.Models
@inject ISnackbar Snackbar
@inject ViewModels.IKeyViewModel KeyViewModel
@using System.IO
@using Blazored.LocalStorage
@using LicentaWebApp.Shared.PayloadModels
@inject IUploadFileService UploadFileService
@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@attribute [Authorize]

<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        height: 80px;
        width: 100%;
    }

    .drag-drop-input {
        position: absolute;
        width: 20%;
        height: 15%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }
</style>

<MudGrid style="margin: auto; justify-content: center; width: 33%">
    <MudText Typo="Typo.h3" Style="margin-bottom: 1.5rem">Sign a document </MudText>
    <MudItem xs="12">
        <MudSelect Label="Select a key" @bind-Value="SelectedKey"
                   AnchorOrigin="Origin.BottomCenter"
                   Placeholder="Please select a key" AdornmentIcon="@Icons.Material.Filled.VpnKey" AdornmentColor="Color.Primary">
            @foreach (var key in KeyViewModel.Keys)
            {
                <MudSelectItem Value="@key.Name">@key.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string"
                   Label="Other signers"
                   MultiSelection="true"
                   AnchorOrigin="Origin.BottomCenter"
                   @bind-SelectedValues="Options">
            @foreach (var user in CompanyUsers)
            {
                <MudSelectItem T="string" Value="@user.EmailAddress">
                    @user.FirstName @user.LastName - @user.EmailAddress
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="drag-drop-zone">

            <InputFile OnChange="OnInputFileChanged" class="drag-drop-input"/>

            @if (_fileName == null)
            {
                <MudText Typo="Typo.h6">Upload file</MudText>
            }
            else
            {
                <MudItem @key="@_file">
                    <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@_fileType"/>
                    @_fileName
                </MudItem>
            }
        </MudPaper>

        <MudGrid Justify="Justify.Center" Style="padding-top: 1rem;" Spacing="2">


            <MudItem>
                <MudButton OnClick="UploadDocument" Disabled="@_show" Variant="Variant.Filled"
                           Style="width: 6rem">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudText>Upload</MudText>
                    }
                </MudButton>
            </MudItem>
            <MudItem>
                <MudButton OnClick="Clear" Disabled="@(_show)" Variant="Variant.Filled"
                           Style="width: 6rem">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudText>Clear</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudItem>

</MudGrid>


@code {

    private string SelectedKey { get; set; }
    private IEnumerable<string> Options { get; set; } = new HashSet<string>();
    private List<User> CompanyUsers { get; set; } = new();

    bool _processing;
    string _fileType;
    IBrowserFile _file;
    string _fileName;
    bool _show = true;

    protected override async Task OnInitializedAsync()
    {
        CompanyUsers = await KeyViewModel.GetCompanyUsers();
        await KeyViewModel.InitializeKeys();
    }

    void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;
        _fileName = _file.Name;
        _fileType = Path.GetExtension(_file.Name);
        _show = false;
    }

    private async Task UploadDocument()
    {
        
        _show = true;
        _processing = true;

        
        if (string.IsNullOrEmpty(SelectedKey))
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("You did not select a key!", Severity.Error);
            Clear();
            return;
        }
        
        var resultAuthState = await UploadFileService.TestAuthState();
        if (resultAuthState == null)
        {
            Clear();
            return;
        }

        if (resultAuthState == "DEAD")
        {
            var dialog = OpenDialog();
            var dialogResult = await dialog.Result;

            if (dialogResult.Cancelled)
            {
                return;
            }
            
            if (dialogResult.Data.ToString() == "email")
            {
                await Task.Delay(100);
                var status = await EmailFactorAuth();
                if (!status)
                {
                    var result = await UploadFileService.ResetTimers();
                    if (result == null)
                    {
                        await LogoutUser();
                    }
                    return;
                }
            }

            if (dialogResult.Data.ToString() == "card")
            {
                var status = await CardFactorAuth();

                if (!status)
                {
                    var result = await UploadFileService.ResetTimers();
                    if (result == null)
                    {
                        await LogoutUser();
                    }
                    return;
                }
            }
            
        }

    
        
        //Simple signing case
        if (!Options.Any())
        {
            var result = await UploadFileService.SignFile(_file, SelectedKey, _fileName);
            if (result != null)
            {
                await JsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", result,
                    "signature.bin");
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("File uploaded", Severity.Success);
                Clear();
            }
            else
            {
                Clear();
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("File could not be uploaded!", Severity.Error);
            }
            
            Clear();
            return;
        }
        
        //Multiple sign case
        var payload = new MultipleSignPayload();
        foreach (var email in Options)
        {
            foreach (var user in CompanyUsers.Where(user => email == user.EmailAddress))
            {
                payload.Users.Add(user);
            }
        }

        payload.UserKeyName = SelectedKey;
        payload.FileName = _fileName;

        var res = await UploadFileService.MultipleSignFile(_file, payload);

        if (res.IsSuccessStatusCode)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Request was sent!", Severity.Success);
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Request for signing could not be sent!", Severity.Error);
        }


        Clear();
    }

    private async Task<bool> EmailFactorAuth()
    {
        
        var dialog = DialogService.Show<SignDialog>("Prove your identity", new DialogOptions {DisableBackdropClick = true});
        var dialogResult = await dialog.Result;


        if (dialogResult.Cancelled)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("We could not verify your identity", Severity.Error);
            Clear();
            return false;
        }

        return true;
    }

    private async Task<bool> CardFactorAuth()
    {
        var response = await UploadFileService.GenerateCardCode();
        
        if (response.helperCode.Length == 32)
        {
            var status = await UploadFileService.AuthenticateSmartCard(response.helperCode);
            
            if (status == "reader not connected")
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("Smart card reader card is not connected!", Severity.Error);

                return false;
            }

            if (status == "card not connected")
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("Smart card is not connected!", Severity.Error);

                return false;
            }
            
            if (status == "Success!")
                return true;
        }

        return false;
    }
    
    void Clear()
    {
        _processing = false;
        _fileName = null;
        _show = true;
        Options = Enumerable.Empty<string>();
        SelectedKey = "";
    }
    
    private IDialogReference OpenDialog()
    {
        return DialogService.Show<LoginDialog>("Prove your identity", new DialogOptions {DisableBackdropClick = true});
    }
    
    private async Task LogoutUser()
    {
        await LocalStorageService.RemoveItemAsync("jwt_token");
        NavigationManager.NavigateTo("/Login", true);
    }
}