@page "/Login/Card-Challenge"
@using LicentaWebApp.Client.ViewModels
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IUserViewModel UserViewModel
@inject ISnackbar Snackbar
@inject ILoginViewModel LoginViewModel


<img src="logo.png" alt="" style="margin: auto; display: block;  padding-bottom: 1rem; max-width: 30%"/>
<div style="margin: auto; width: 33%">
    @if (TimePassed)
    {
        <MudText Typo="Typo.h5"  Align="Align.Center">You will be redirected to log in..</MudText>
    }
    else
    {
        <MudText Typo="Typo.h5" Align="Align.Center">@Seconds</MudText>
        <MudCard>
            <MudCardContent>
                <MudText>Connect your smart card and press log in</MudText>
            </MudCardContent>
            <MudCardActions Style="justify-content: center">
                <MudButton Disabled="@TimePassed"
                           ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnClickFunction">
                    Log in
                </MudButton>
            </MudCardActions>
        </MudCard>
    }
</div>

@code {
    int Seconds { get; set; } = 60;

    bool TimePassed { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (UserViewModel.ValidSmartCard == false || UserViewModel.SmartCardCode.Length != 32)
            NavigationManager.NavigateTo("/");

        UserViewModel.ValidSmartCard = false;
        
        while (Seconds > 0)
        {
            await Task.Delay(1000);
            Seconds--;
            StateHasChanged();
        }
        TimePassed = true;
        StateHasChanged();
        await Task.Delay(5000);
        NavigationManager.NavigateTo("/");
    }
    
    
    private async Task OnClickFunction()
    {
        
        LoginViewModel.EmailAddress = UserViewModel.EmailAddress;
        var authenticationResponse = await LoginViewModel.AuthenticateSmartCard(UserViewModel.SmartCardCode);
        
        if (authenticationResponse.Token == "reader not connected")
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("The smart card reader is not connected!", Severity.Error);
            return;
        }

        if (authenticationResponse.Token == "card not connected")
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("The smart card is not connected!", Severity.Error);
            return;
        }
        
        
        if (authenticationResponse.Token != string.Empty)
        {
            await LocalStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("The code is not correct!", Severity.Error);
        }
    }
}