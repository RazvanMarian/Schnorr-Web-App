@page "/SignMultipleUsers"
@using LicentaWebApp.Client.ViewModels
@using LicentaWebApp.Shared.Models
@using System.Linq
@inject IUserViewModel _userViewModel
@inject IUploadFileService _uploadFileService
@inject ISnackbar _snackbar

<MudGrid Justify="Justify.Center" Spacing="4">
    <MudSelect T="string"
               Label="Other signers"
               MultiSelection="true"
               AnchorOrigin="Origin.BottomCenter"
               @bind-SelectedValues="Options">
        @foreach (var user in CompanyUsers)
        {
            <MudSelectItem T="string" Value="@user.EmailAddress">
                @user.FirstName @user.LastName - @user.EmailAddress
            </MudSelectItem>
        }
    </MudSelect>
    <MudGrid Style="padding-top: 5rem" Justify="Justify.Center" >
        <MudButton OnClick="OnClickFunction" Color="Color.Primary" Variant="Variant.Filled">Sign file</MudButton>
    </MudGrid>
</MudGrid>

@code {

    //private string Value { get; set; } = "Nothing selected";
    private IEnumerable<string> Options { get; set; } = new HashSet<string>();
    private List<User> CompanyUsers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        CompanyUsers = await _userViewModel.GetCompanyUsers();

    }

    private async Task OnClickFunction()
    {
        MultipleSignPayload payload = new MultipleSignPayload();
        foreach (var email in Options)
        {
            foreach (var user in CompanyUsers.Where(user => email == user.EmailAddress))
            {
                payload.Users.Add(user);
            }
        }

        payload.FileContent = "file content";
        payload.FileHash = "file hash";
        payload.UserKeyName = "user's key";
        payload.FileName = "file.txt";

        var res = await _uploadFileService.MultipleSignFile(payload);

        if (res.IsSuccessStatusCode)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("Request was sent!", Severity.Success); 
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("Request was not sent!", Severity.Error); 
        }
    }

}