@page "/Login"

@using LicentaWebApp.Client.ViewModels
@inject ILoginViewModel LoginViewModel
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUserViewModel UserViewModel
@inject IDialogService DialogService

<div style="max-width: 400px; margin: auto">

    <img src="logo.png" alt="" style="margin: auto; display: block;  padding-bottom: 1rem; max-width: 100%"/>
    <EditForm Model="@LoginViewModel" OnValidSubmit="AuthenticateJwt">

        <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="LoginViewModel.EmailAddress" For="@(() => LoginViewModel.EmailAddress)"/>
                <MudTextField Label="Password" HelperText="I hope you did not forget your password.." Class="mt-3"
                              @bind-Value="LoginViewModel.Password" For="@(() => LoginViewModel.Password)"
                              InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                
                
                <MudButton Disabled="Processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                           Class="ml-auto" Style="margin: auto">
                    
                    @if (!Processing)
                    {
                        <MudText>Log in</MudText>
                    }
                    else
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Style="margin-left: 0.5rem">Log in</MudText>
                    }
                </MudButton>
                
            </MudCardActions>
        </MudCard>
        <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
            Hopefully you did not forget your password!
        </MudText>

    </EditForm>
</div>

@code {
    private bool Processing { get; set; }

    private async Task AuthenticateJwt()
    {
        Processing = true;
        var authenticationResponse = await LoginViewModel.AuthenticateCredentials();
        if (authenticationResponse.Email != string.Empty)
        {
            var dialog = OpenDialog();
            var dialogResult = await dialog.Result;

            if (dialogResult.Cancelled)
            {
                Clear();
                return;
            }
            if (dialogResult.Data.ToString() == "email")
            {
                authenticationResponse = await LoginViewModel.AuthenticateJwt();
                if (authenticationResponse.Email != string.Empty)
                {
                    UserViewModel.EmailAddress = authenticationResponse.Email;
                    UserViewModel.ValidOtp = true;
                    NavigationManager.NavigateTo("/Login/Challenge");
                }
            }

            if (dialogResult.Data.ToString() == "card")
            {
                authenticationResponse = await LoginViewModel.GenerateCardCode();
                
                if (authenticationResponse.Email != string.Empty)
                {
                    UserViewModel.EmailAddress = authenticationResponse.Email;
                    UserViewModel.ValidSmartCard = true;
                    UserViewModel.SmartCardCode = authenticationResponse.helperCode;
                    NavigationManager.NavigateTo("/Login/Card-Challenge");
                }
            }
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Username or password are wrong!", Severity.Error);
        }
        Clear();
    }

    private void Clear()
    {
        LoginViewModel.EmailAddress = "";
        LoginViewModel.Password = "";
        Processing = false;
    }
    
    
    private IDialogReference OpenDialog()
    {
        return DialogService.Show<LoginDialog>("Simple Dialog", new DialogOptions {DisableBackdropClick = true});
    }
    
}