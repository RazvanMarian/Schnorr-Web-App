@page "/Activity"
@using LicentaWebApp.Shared.Models
@using System.Security.Claims
@inject ViewModels.INotificationViewModel _notificationViewModel
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

@if (Notifications == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else if (!Notifications.Any())
{
    <MudText Typo="Typo.h4">You don't have any activity yet</MudText>
}
else
{
    <MudText Align="Align.Center" Style="padding-bottom: 5rem" Typo="Typo.h3">My History</MudText>
    <MudText Typo="Typo.h6">Latest requests accepted</MudText>
    <MudExpansionPanels Style="padding-bottom: 2rem">
        @foreach (var notification in Notifications)
        {
            @if (notification.Status == 0)
            {
                <MudExpansionPanel Text="@notification.FileName">
                    <MudItem style="display: inline-block">
                        <MudText>- status : <MudIcon Icon="@Icons.Filled.Check" Color="Color.Success"></MudIcon></MudText>
                        <MudText>- created at: @notification.CreatedAt</MudText>
                        <MudText>- created by: @notification.InitiatorEmailAddress</MudText>
                    </MudItem>

                    <MudItem style="display: inline-block">
                        <MudButton OnClick="() => OnClickFunction(notification.Id)"
                                   Variant="Variant.Filled" Color="Color.Default">
                            Download signature
                        </MudButton>
                    </MudItem>
                </MudExpansionPanel>
            }
        }
    </MudExpansionPanels>

    <MudDivider/>

    <MudText Typo="Typo.h6">Documents in pending</MudText>
    <MudExpansionPanels Style="padding-top: 2rem; padding-bottom: 2rem">
        @foreach (var notification in Notifications)
        {
            @if (notification.Status > 0 && notification.IdInitiator == UserId)
            {
                <MudExpansionPanel Text="@notification.FileName">
                    <MudItem style="display: inline-block">
                        <MudText>- status : 
                            <MudIcon Icon="@Icons.Filled.Pending" Color="Color.Warning"></MudIcon>
                        </MudText>
                        <MudText>- created at: @notification.CreatedAt</MudText>
                        <MudText>- created by: @notification.InitiatorEmailAddress</MudText>
                    </MudItem>
                </MudExpansionPanel>
            }
        }
    </MudExpansionPanels>

    <MudDivider/>

    <MudExpansionPanels Style="padding-top: 2rem">
        <MudText Typo="Typo.h6">Past documents that included you</MudText>
        @foreach (var notification in Notifications)
        {
            @if (notification.Status < 0)
            {
                <MudExpansionPanel Text="@notification.FileName">
                    <MudItem style="display: inline-block">
                        @if (notification.Status == -1)
                        {
                            <MudText>- status : <MudIcon Icon="@Icons.Filled.Check" Color="Color.Success"></MudIcon></MudText>
                        }
                        else
                        {
                            <MudText>- status : <MudIcon Icon="@Icons.Filled.Cancel" Color="Color.Error"></MudIcon></MudText>
                        }
                        <MudText>- created at: @notification.CreatedAt</MudText>
                        <MudText>- created by: @notification.InitiatorEmailAddress</MudText>
                    </MudItem>
                    @if (notification.Status == -1)
                    {
                        <MudItem style="display: inline-block">
                            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => DownloadSignature(notification.Id)">
                                Download signature
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="() => DownloadCertificate(notification.Id)">
                                Export public key
                            </MudButton>
                        </MudItem>
                    }

                </MudExpansionPanel>
            }
        }
    </MudExpansionPanels>
}

@code {
    private List<Notification> Notifications { get; set; }

    private int UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            if (claim != null) UserId = int.Parse(claim.Value);
        }

        Notifications = await _notificationViewModel.GetAllNotifications();
    }

    private async Task OnClickFunction(int notificationId)
    {
        var result = await _notificationViewModel.MultipleSignFinish(notificationId);
        if (result != null)
        {
            Notifications = await _notificationViewModel.GetAllNotifications();
            StateHasChanged();
            await _jsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", result,
                "signature.bin");
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("The document was signed!", Severity.Success);
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("The document could not be signed!", Severity.Error);
        }
    }

    private async Task DownloadSignature(int notificationId)
    {
        var result = await _notificationViewModel.DownloadSignature(notificationId);
        Console.WriteLine(result);
        if (!string.IsNullOrEmpty(result))
            await _jsRuntime.InvokeVoidAsync("downloadFile", "application/octet-stream", result, "signature.bin");
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("The signature could not be downloaded!", Severity.Error);
        }
    }

    private async Task DownloadCertificate(int notificationId)
    {
        var result = await _notificationViewModel.DownloadCertificate(notificationId);
        Console.WriteLine(result);
        if (!string.IsNullOrEmpty(result))
            await _jsRuntime.InvokeVoidAsync("downloadFile", "application/x-pem-file", result, "cert.pem");
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("The certificate could not be exported!", Severity.Error);
        }
    }

}