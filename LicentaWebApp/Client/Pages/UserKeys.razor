@page "/User-Keys"
@using LicentaWebApp.Client.ViewModels
@using LicentaWebApp.Shared.Models
@inject IKeyViewModel _keyViewModel
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@attribute [Authorize]


@if (_keyViewModel.Keys.Any())
{
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        @foreach (var k in _keyViewModel.Keys)
        {
            <MudItem xs="3" Style="min-width: 20rem">
                <MudCard>
                    <MudCardContent>
                        <MudIcon Icon="@Icons.Filled.VpnKey"></MudIcon>
                        <MudText>@k.Name</MudText>
                        @if (@k.Description != null)
                        {
                            <MudText Typo="Typo.body2">@k.Description</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No description</MudText>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(_ => ExportKey(k))">
                            Export
                        </MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(_ => RenameKey(k))">
                            Rename
                        </MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(_ => DeleteKey(k))" Color="Color.Primary">
                            Delete
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else if(!_initialized)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else if(_initialized)
{
    <MudText Typo="Typo.h4">You don't have any keys yet</MudText>
}


@code {
    private bool _initialized;
    protected override async Task OnInitializedAsync()
    {
        await _keyViewModel.InitializeKeys();
        _initialized = true;
    }
    
    
    async Task DeleteKey(Key key)
    {
        var parameters = new DialogParameters { ["key"]=key };

        var dialog = _dialogService.Show<KeyDialog>("Delete Key", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var res = await _keyViewModel.DeleteKey(key);
            if (res.IsSuccessStatusCode)
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Key Deleted", Severity.Success);
                await _keyViewModel.InitializeKeys();
                StateHasChanged();
            }
            else
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Key could not be deleted!", Severity.Error);
            }
        }
    }

    async Task RenameKey(Key key)
    {
        var parameters = new DialogParameters { ["key"]=key };

        var dialog = _dialogService.Show<KeyRenameDialog>("Rename key", parameters);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            
            var res = await _keyViewModel.RenameKey(key);
            if (res.IsSuccessStatusCode)
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Key renamed", Severity.Success);
                await _keyViewModel.InitializeKeys();
                StateHasChanged();
            }
            else
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("Key could not be renamed !", Severity.Error);
                await _keyViewModel.InitializeKeys();
                StateHasChanged();
            }
        }
    }
    
    async Task ExportKey(Key key)
    {
        var res = await _keyViewModel.GenerateCertificate(key);
        if (res!="ERROR")
        {
            await _jsRuntime.InvokeVoidAsync("downloadFile", "application/x-pem-file",res,"cert.pem");
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("Key exported!", Severity.Success);
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("Key could not be exported!", Severity.Error);
        }
    }
}