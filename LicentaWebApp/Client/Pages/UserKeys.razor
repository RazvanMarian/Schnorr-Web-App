@page "/UserKeys"
@using LicentaWebApp.Client.ViewModels
@using LicentaWebApp.Shared.Models
@inject IKeyViewModel _keyViewModel
@inject IDialogService _dialogService


@if (_keyViewModel.Keys.Any())
{
    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        @foreach (var k in _keyViewModel.Keys)
        {
            <MudItem xs="3">
                <MudCard>
                    <MudCardContent>
                        <MudText>@k.Name</MudText>
                        @if (@k.Description != null)
                        {
                            <MudText Typo="Typo.body2">@k.Description</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No description</MudText>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Rename</MudButton>
                        <MudButton Variant="Variant.Text" OnClick="@(_ => DeleteKey(k))" 
                                   Color="Color.Primary">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}


@code {


    protected override async Task OnInitializedAsync()
    {
        await _keyViewModel.InitializeKeys();
    }
    async Task DeleteKey(Key key)
    {
        var parameters = new DialogParameters { ["key"]=key };

        var dialog = _dialogService.Show<KeyDialog>("Delete Key", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            Console.WriteLine("Key deleted!");
        }
    }

    
}