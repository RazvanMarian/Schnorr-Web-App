@page "/Verify-Document"
@using System.IO
@inject ISnackbar _snackbar
@inject IUploadFileService _uploadFileService

<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        height: 80px;
        width: 100%;
    }

    .drag-drop-input {
        position: absolute;
        width: 16%;
        height: 11%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }
</style>

<MudText Typo="Typo.h3" Align="Align.Center"> Verify a document's signature</MudText>
<MudGrid Style="max-width: 20rem;margin: auto;">
    <MudItem xs="12">
        <MudText Typo="Typo.h5" Align="Align.Center">Upload the document</MudText>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="drag-drop-zone">

            <InputFile OnChange="OnChangeDocument" class="drag-drop-input"/>

            @if (_documentFile == null)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">Upload file</MudText>
            }
            else
            {
                <MudItem @key="@_documentFile">
                    <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@(Path.GetExtension(_documentFile.Name))"/>
                    @_documentFile.Name
                </MudItem>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudText Typo="Typo.h5" Align="Align.Center">Upload the signature</MudText>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="drag-drop-zone">

            <InputFile OnChange="OnChangeSignature" class="drag-drop-input"/>

            @if (_signatureFile == null)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">Upload file</MudText>
            }
            else
            {
                <MudItem @key="@_signatureFile">
                    <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@(Path.GetExtension(_signatureFile.Name))"/>
                    @_signatureFile.Name
                </MudItem>
            }
        </MudPaper>
    </MudItem>

</MudGrid>
<MudGrid Justify="Justify.Center" Spacing="2" Style="padding-top: 2.5rem;max-width: 20rem;margin: auto; ">
    <MudItem>

        <MudButton Disabled="@(_processing || _disabled)" Variant="Variant.Filled" OnClick="UploadFiles">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Verify</MudText>
            }
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Disabled="_processing" Variant="Variant.Filled" OnClick="Clear">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Clear</MudText>
            }
        </MudButton>
    </MudItem>
</MudGrid>

@code
{
    IBrowserFile _documentFile;
    IBrowserFile _signatureFile;
    bool _processing;
    bool _disabled = true;

    private void OnChangeDocument(InputFileChangeEventArgs e)
    {
        _documentFile = e.File;
        if (_signatureFile != null && _documentFile != null)
            _disabled = false;

    }
    

    private void OnChangeSignature(InputFileChangeEventArgs e)
    {
        _signatureFile = e.File;
        if (_signatureFile != null  && _documentFile != null)
            _disabled = false;
    }

    private async Task UploadFiles()
    {
        _processing = true;
        var res = await _uploadFileService.VerifyFile(_documentFile, _signatureFile);

        if (res != null)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            _snackbar.Add("The signature was verified successfully!", Severity.Success);
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            _snackbar.Add("The signature could not be verified!", Severity.Error);
        }

        Clear();
        _processing = false;
    }

    private void Clear()
    {
        _signatureFile = null;
        _documentFile = null;
        _disabled = true;
    }
}