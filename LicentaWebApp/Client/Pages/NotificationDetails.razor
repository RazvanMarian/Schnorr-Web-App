@page "/Notification/{NotificationId}"
@using LicentaWebApp.Shared.Models
@inject ViewModels.INotificationViewModel NotificationViewModel
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUploadFileService UploadFileService
@attribute [Authorize]

<MudGrid Spacing="4" Style="height: 90vh">
    <MudItem xs="12" Style="height: 80%">
        @if (Notification != null)
        {
            <div class="d-flex flex-column py-1">
                <MudText>You we're asked to sign the following document by Marian Razvan created on @Notification.CreatedAt</MudText>
            </div>
        }
        else
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        @if (Notification != null)
        {
            <embed src="@Notification.FilePath" type="application/pdf" width="100%" height="100%"/>
        }
        else
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
    </MudItem>

    <MudGrid Justify="Justify.Center" Style="padding-top: 1rem;" Spacing="2">
        <MudItem>
            <MudButton OnClick="Sign" Color="Color.Primary" Variant="Variant.Filled"
                       Style="width: 6rem">
                Sign
            </MudButton>
        </MudItem>
        
        <MudItem>
            <MudButton OnClick="Deny" Color="Color.Primary" Variant="Variant.Filled" Style="width: 6rem">
                Deny
            </MudButton>
        </MudItem>
    </MudGrid>
</MudGrid>

@code {

    [Parameter]
    public string NotificationId { get; set; }

    private Notification Notification { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Notification = await NotificationViewModel.GetNotificationById(int.Parse(NotificationId));
    }

    protected override async Task OnParametersSetAsync()
    {
        Notification = await NotificationViewModel.GetNotificationById(int.Parse(NotificationId));
    }


    private async Task Sign()
    {
        var resultOtpGeneration = await UploadFileService.TestAuthState();
        if (resultOtpGeneration == null)
        {
            return;
        }
        Console.WriteLine(resultOtpGeneration);
        if (resultOtpGeneration != "ALIVE")
        {
            var dialogOtp = DialogService.Show<SignDialog>("Prove your identity", new DialogOptions {DisableBackdropClick = true});
            var dialogResult = await dialogOtp.Result;
            if (dialogResult.Cancelled)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("We could not verify your identity", Severity.Error);
                return;
            }
            await Task.Delay(100);
        }
        var parameter = new DialogParameters { ["Action"]="SIGN" };
        var dialog = DialogService.Show<NotificationDialog>("Sign",parameter);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var key = result.Data.ToString();
            if (string.IsNullOrEmpty(key))
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("The request could not be accepted!", Severity.Error);
                return;
            }
            var res = await NotificationViewModel.AcceptNotification(Notification.Id, key);
            if (res.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add("The request could not be accepted!", Severity.Error);
            }
        }
    }
    
    private async Task Deny()
    {
        var parameter = new DialogParameters { ["Action"]="DENY" };
        var dialog = DialogService.Show<NotificationDialog>("Deny",parameter);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reason = result.Data.ToString();
            var res = await NotificationViewModel.DenyNotification(Notification.Id, reason);

            if (res.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

}