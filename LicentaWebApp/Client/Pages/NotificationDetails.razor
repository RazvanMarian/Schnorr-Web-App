@page "/Notification/{NotificationId}"
@using LicentaWebApp.Shared.Models
@inject ViewModels.INotificationViewModel _notificationViewModel
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar
@inject IUploadFileService _uploadFileService
@attribute [Authorize]

<MudGrid Spacing="4" Style="height: 90vh">
    <MudItem xs="12" Style="height: 80%">
        @if (Notification != null)
        {
            <div class="d-flex flex-column py-1">
                <MudText>You we're asked to sign the following document by Marian Razvan created on @Notification.CreatedAt</MudText>
            </div>
        }
        else
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        @if (Notification != null)
        {
            <embed src="@Notification.FilePath" type="application/pdf" width="100%" height="100%"/>
        }
        else
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
    </MudItem>

    <MudGrid Justify="Justify.Center" Style="padding-top: 1rem;" Spacing="2">
        <MudItem>
            <MudButton OnClick="Sign" Color="Color.Primary" Variant="Variant.Filled"
                       Style="width: 6rem">
                Sign
            </MudButton>
        </MudItem>
        
        <MudItem>
            <MudButton OnClick="Deny" Color="Color.Primary" Variant="Variant.Filled" Style="width: 6rem">
                Deny
            </MudButton>
        </MudItem>
    </MudGrid>
</MudGrid>

@code {

    [Parameter]
    public string NotificationId { get; set; }

    private Notification Notification { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Notification = await _notificationViewModel.GetNotificationById(int.Parse(NotificationId));
    }

    protected override async Task OnParametersSetAsync()
    {
        Notification = await _notificationViewModel.GetNotificationById(int.Parse(NotificationId));
    }


    private async Task Sign()
    {
        var resultOtpGeneration = await _uploadFileService.GenerateOtpCode();
        if (resultOtpGeneration == null)
        {
            return;
        }
        
        var dialogOtp = _dialogService.Show<SignDialog>("Prove your identity", new DialogOptions { DisableBackdropClick = true });
        var dialogResult = await dialogOtp.Result;
        if (dialogResult.Cancelled)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add("We could not verify your identity", Severity.Error);
            return;
        }
        await Task.Delay(100);
        
        var parameter = new DialogParameters { ["Action"]="SIGN" };
        var dialog = _dialogService.Show<NotificationDialog>("Sign",parameter);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var key = result.Data.ToString();
            if (string.IsNullOrEmpty(key))
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("The request could not be accepted!", Severity.Error);
                return;
            }
            var res = await _notificationViewModel.AcceptNotification(Notification.Id, key);
            if (res.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo("/");
            }
            else
            {
                _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                _snackbar.Add("The request could not be accepted!", Severity.Error);
            }
        }
    }
    
    private async Task Deny()
    {
        var parameter = new DialogParameters { ["Action"]="DENY" };
        var dialog = _dialogService.Show<NotificationDialog>("Deny",parameter);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var reason = result.Data.ToString();
            var res = await _notificationViewModel.DenyNotification(Notification.Id, reason);

            if (res.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo("/");
            }
        }
    }

}