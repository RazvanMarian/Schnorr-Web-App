@page "/GenerateKey"
@attribute [Authorize]
@inject HttpClient _httpClient
@inject IKeyViewModel _keyViewModel
@inject ISnackbar _snackbar
@using LicentaWebApp.Client.ViewModels

<div style="max-width: 400px;">
    <EditForm Model="@_keyViewModel" OnValidSubmit="OnClickFunction">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Key Name" HelperText="Used for differentiating your keys"
                              @bind-Value="_keyViewModel.Name" For="@(() => _keyViewModel.Name)" />
                <MudTextField Label="Key description" Class="mt-3"
                              @bind-Value="_keyViewModel.Description" For="@(() => _keyViewModel.Description)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit"  Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Generate</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {

    private async Task OnClickFunction()
    {
        var result = await _keyViewModel.GenerateKey();
        
        
        if (result.IsSuccessStatusCode)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            _snackbar.Add("Key generated successfully", Severity.Success);
        }
        else
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            _snackbar.Add("Key generation failed!", Severity.Error);
        }
        _keyViewModel.Name = null;
        _keyViewModel.Description = null;
    }

}