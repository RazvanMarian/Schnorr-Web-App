@page "/Generate-Key"
@attribute [Authorize]
@inject IKeyViewModel KeyViewModel
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using LicentaWebApp.Client.ViewModels


<div style="max-width: 400px; margin: auto">
    <MudText Align="Align.Center" Style="margin-bottom: 1.5rem" Typo="Typo.h4">Generate a key </MudText>
    <EditForm Model="@KeyViewModel" OnValidSubmit="OnClickFunction">
        <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Key Name" HelperText="Used for differentiating your keys"
                              @bind-Value="KeyViewModel.Name" For="@(() => KeyViewModel.Name)"/>
                <MudTextField Label="Key description" Class="mt-3"
                              @bind-Value="KeyViewModel.Description" For="@(() => KeyViewModel.Description)"/>
            </MudCardContent>
            <MudCardActions Style="justify-content: center">
                <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Generate</MudText>
                    }
                </MudButton>

            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    private bool _processing;

    private async Task OnClickFunction()
    {
        _processing = true;
        if (KeyViewModel.Name == null)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("You have to give a name to your key!", Severity.Error);
            _processing = false;
            _processing = false;
            return;
        }

        if (KeyViewModel.Name.Length > 20 || KeyViewModel.Description?.Length > 30)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Your key name is too long!", Severity.Error);
            _processing = false;
            _processing = false;
            KeyViewModel.Name = null;
            KeyViewModel.Description = null;
            return;
        }

        var result = await KeyViewModel.GenerateKey();
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Key generated successfully!", Severity.Success);
            NavigationManager.NavigateTo("/User-Keys");
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            Snackbar.Add("Key generation failed!", Severity.Error);
        }

        _processing = false;
        KeyViewModel.Name = null;
        KeyViewModel.Description = null;
    }

}